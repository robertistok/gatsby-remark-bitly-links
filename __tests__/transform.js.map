{"version":3,"sources":["../src/__tests__/transform.js"],"names":["fixtureDirName","inputFileName","expectedFileName","options","describe","fixturesDir","path","resolve","join","__dirname","inputFilePath","input","fs","readFileSync","expectedFilePath","expected","it","processor","use","plugin","process","err","actual","Error","expect","contents","toEqual","done"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,cAAc,GAAG,cAAvB;AACA,MAAMC,aAAa,GAAG,UAAtB;AACA,MAAMC,gBAAgB,GAAG,aAAzB;AACA,MAAMC,OAAO,GAAG,EAAhB;AAEAC,QAAQ,CAAC,oBAAD,EAAuB,MAAM;AACnC,QAAMC,WAAW,GAAGC,cAAKC,OAAL,CAAaD,cAAKE,IAAL,CAAUC,SAAV,EAAqB,IAArB,CAAb,EAAyCT,cAAzC,CAApB;;AAEA,QAAMU,aAAa,GAAGJ,cAAKE,IAAL,CAAUH,WAAV,EAAuBJ,aAAvB,CAAtB;;AACA,QAAMU,KAAK,GAAGC,YAAGC,YAAH,CAAgBH,aAAhB,EAA+B,MAA/B,CAAd;;AAEA,QAAMI,gBAAgB,GAAGR,cAAKE,IAAL,CAAUH,WAAV,EAAuBH,gBAAvB,CAAzB;;AACA,QAAMa,QAAQ,GAAGH,YAAGC,YAAH,CAAgBC,gBAAhB,EAAkC,MAAlC,CAAjB;;AAEAE,EAAAA,EAAE,CAAC,qBAAD,EAAwB,YAAY;AACpC,UAAMC,SAAS,GAAG,uBAASC,GAAT,CAAaC,cAAb,EAAqBhB,OAArB,CAAlB;AAEAc,IAAAA,SAAS,CAACG,OAAV,CAAkBT,KAAlB,EAAyB,CAACU,GAAD,EAAMC,MAAN,KAAiB;AACxC,UAAID,GAAJ,EAAS;AACP,cAAM,IAAIE,KAAJ,CAAUF,GAAV,CAAN;AACD;;AAEDG,MAAAA,MAAM,CAACF,MAAM,IAAIA,MAAM,CAACG,QAAlB,CAAN,CAAkCC,OAAlC,CAA0CX,QAA1C;AACAY,MAAAA,IAAI;AACL,KAPD;AAQD,GAXC,CAAF;AAYD,CArBO,CAAR","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport remark from \"remark\";\nimport plugin from \"../index\";\n\nconst fixtureDirName = \"__fixtures__\";\nconst inputFileName = \"input.md\";\nconst expectedFileName = \"expected.md\";\nconst options = {};\n\ndescribe(\"Remark transformer\", () => {\n  const fixturesDir = path.resolve(path.join(__dirname, \"..\"), fixtureDirName);\n\n  const inputFilePath = path.join(fixturesDir, inputFileName);\n  const input = fs.readFileSync(inputFilePath, \"utf8\");\n\n  const expectedFilePath = path.join(fixturesDir, expectedFileName);\n  const expected = fs.readFileSync(expectedFilePath, \"utf8\");\n\n  it(\"finds all the links\", async () => {\n    const processor = remark().use(plugin, options);\n\n    processor.process(input, (err, actual) => {\n      if (err) {\n        throw new Error(err);\n      }\n\n      expect(actual && actual.contents).toEqual(expected);\n      done();\n    });\n  });\n});\n"],"file":"transform.js"}